// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_to_agent.proto

#ifndef PROTOBUF_msg_5fto_5fagent_2eproto__INCLUDED
#define PROTOBUF_msg_5fto_5fagent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_5fto_5fagent_2eproto();
void protobuf_AssignDesc_msg_5fto_5fagent_2eproto();
void protobuf_ShutdownFile_msg_5fto_5fagent_2eproto();

class MsgToAgent;

// ===================================================================

class MsgToAgent : public ::google::protobuf::Message {
 public:
  MsgToAgent();
  virtual ~MsgToAgent();

  MsgToAgent(const MsgToAgent& from);

  inline MsgToAgent& operator=(const MsgToAgent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgToAgent& default_instance();

  void Swap(MsgToAgent* other);

  // implements Message ----------------------------------------------

  MsgToAgent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgToAgent& from);
  void MergeFrom(const MsgToAgent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float observation = 1 [packed = true];
  inline int observation_size() const;
  inline void clear_observation();
  static const int kObservationFieldNumber = 1;
  inline float observation(int index) const;
  inline void set_observation(int index, float value);
  inline void add_observation(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      observation() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_observation();

  // required float reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline float reward() const;
  inline void set_reward(float value);

  // required bool done = 3;
  inline bool has_done() const;
  inline void clear_done();
  static const int kDoneFieldNumber = 3;
  inline bool done() const;
  inline void set_done(bool value);

  // required string info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:MsgToAgent)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_done();
  inline void clear_has_done();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > observation_;
  mutable int _observation_cached_byte_size_;
  float reward_;
  bool done_;
  ::std::string* info_;
  friend void  protobuf_AddDesc_msg_5fto_5fagent_2eproto();
  friend void protobuf_AssignDesc_msg_5fto_5fagent_2eproto();
  friend void protobuf_ShutdownFile_msg_5fto_5fagent_2eproto();

  void InitAsDefaultInstance();
  static MsgToAgent* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgToAgent

// repeated float observation = 1 [packed = true];
inline int MsgToAgent::observation_size() const {
  return observation_.size();
}
inline void MsgToAgent::clear_observation() {
  observation_.Clear();
}
inline float MsgToAgent::observation(int index) const {
  // @@protoc_insertion_point(field_get:MsgToAgent.observation)
  return observation_.Get(index);
}
inline void MsgToAgent::set_observation(int index, float value) {
  observation_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgToAgent.observation)
}
inline void MsgToAgent::add_observation(float value) {
  observation_.Add(value);
  // @@protoc_insertion_point(field_add:MsgToAgent.observation)
}
inline const ::google::protobuf::RepeatedField< float >&
MsgToAgent::observation() const {
  // @@protoc_insertion_point(field_list:MsgToAgent.observation)
  return observation_;
}
inline ::google::protobuf::RepeatedField< float >*
MsgToAgent::mutable_observation() {
  // @@protoc_insertion_point(field_mutable_list:MsgToAgent.observation)
  return &observation_;
}

// required float reward = 2;
inline bool MsgToAgent::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgToAgent::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgToAgent::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgToAgent::clear_reward() {
  reward_ = 0;
  clear_has_reward();
}
inline float MsgToAgent::reward() const {
  // @@protoc_insertion_point(field_get:MsgToAgent.reward)
  return reward_;
}
inline void MsgToAgent::set_reward(float value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:MsgToAgent.reward)
}

// required bool done = 3;
inline bool MsgToAgent::has_done() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgToAgent::set_has_done() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgToAgent::clear_has_done() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgToAgent::clear_done() {
  done_ = false;
  clear_has_done();
}
inline bool MsgToAgent::done() const {
  // @@protoc_insertion_point(field_get:MsgToAgent.done)
  return done_;
}
inline void MsgToAgent::set_done(bool value) {
  set_has_done();
  done_ = value;
  // @@protoc_insertion_point(field_set:MsgToAgent.done)
}

// required string info = 4;
inline bool MsgToAgent::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgToAgent::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgToAgent::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgToAgent::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& MsgToAgent::info() const {
  // @@protoc_insertion_point(field_get:MsgToAgent.info)
  return *info_;
}
inline void MsgToAgent::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:MsgToAgent.info)
}
inline void MsgToAgent::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:MsgToAgent.info)
}
inline void MsgToAgent::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MsgToAgent.info)
}
inline ::std::string* MsgToAgent::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MsgToAgent.info)
  return info_;
}
inline ::std::string* MsgToAgent::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgToAgent::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MsgToAgent.info)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5fto_5fagent_2eproto__INCLUDED
